"""
Route Between Nodes

Given a directed graph, design an algorithm to find out whether there is a route between two nodes.

"""
from collections import deque
import unittest

from .graph import Graph


def find_path(node1, node2):
    """
    Check if there is a route between two nodes using breadth-first traversal.

    Args:
        node1 (GraphNode): Source node.
        node2 (GraphNode): Destination node.

    Returns:
        bool: True if there is a path between the two nodes, False otherwise.

    """
    visited = set()
    q = deque((node1,))
    while q:
        node = q.popleft()
        if node == node2:
            return True
        visited.add(node)
        for link in node.links:
            if link not in visited:
                q.append(link)
    return False


class TestFindPath(unittest.TestCase):
    """
    Test find_path() function.

    Each test in the TestCase named test_case_<number_of_nodes>_<test_sequence_number>.

    Depiction of test cases: ./images/problem-1-route-between-nodes.svg

    """

    def _run_test_case(self, graph, paths):
        for node1 in graph.nodes:
            for node2 in graph.nodes:
                if find_path(node1, node2):
                    self.assertIn((node1.name, node2.name), paths)
                else:
                    self.assertNotIn((node1.name, node2.name), paths)

    def test_case_1_1(self):
        graph = Graph({0: []})
        self._run_test_case(graph, {(0, 0)})

    def test_case_2_1(self):
        graph = Graph({0: [1], 1: []})
        self._run_test_case(graph, {(0, 0), (0, 1), (1, 1)})

    def test_case_2_2(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [0]}),
            paths={(0, 0), (0, 1), (1, 0), (1, 1)}
        )

    def test_case_2_3(self):
        self._run_test_case(
            graph=Graph({0: [], 1: []}),
            paths={(0, 0), (1, 1)}
        )

    def test_case_3_1(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [2], 2: [0]}),
            paths={(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)}
        )

    def test_case_3_2(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [2], 2: []}),
            paths={(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2)}
        )

    def test_case_3_3(self):
        self._run_test_case(
            graph=Graph({0: [1, 2], 1: [2], 2: [0]}),
            paths={(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)}
        )

    def test_case_3_4(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [2], 2: []}),
            paths={(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2)}
        )

    def test_case_3_5(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [0], 2: [0]}),
            paths={(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (2, 2)}
        )

    def test_case_3_6(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [0, 2], 2: [1]}),
            paths={(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)}
        )

    def test_case_3_7(self):
        self._run_test_case(
            graph=Graph({0: [], 1: [], 2: [0]}),
            paths={(0, 0), (1, 1), (2, 0), (2, 2)}
        )

    def test_case_4_1(self):
        self._run_test_case(
            graph=Graph({0: [], 1: [], 2: [], 3: []}),
            paths={(0, 0), (1, 1), (2, 2), (3, 3)}
        )

    def test_case_4_2(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [], 2: [3], 3: []}),
            paths={(0, 0), (0, 1), (1, 1), (2, 2), (2, 3), (3, 3)}
        )

    def test_case_4_3(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [2], 2: [3], 3: []}),
            paths={(0, 0), (0, 1), (0, 2), (0, 3), (1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)}
        )

    def test_case_4_4(self):
        self._run_test_case(
            graph=Graph({0: [1, 3], 1: [2, 3], 2: [0, 1], 3: [0, 2]}),
            paths={(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 1), (1, 2), (1, 3),
                   (2, 0), (2, 1), (2, 2), (2, 3), (3, 0), (3, 1), (3, 2), (3, 3)}
        )

    def test_case_4_5(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [2], 2: [1], 3: [1]}),
            paths={(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (3, 3)}
        )

    def test_case_4_6(self):
        self._run_test_case(
            graph=Graph({0: [1, 2], 1: [], 2: [3], 3: [0]}),
            paths={(0, 0), (0, 1), (0, 2), (0, 3), (1, 1), (2, 0), (2, 1), (2, 2), (2, 3),
                   (3, 0), (3, 1), (3, 2), (3, 3)}
        )

    def test_case_4_7(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [3], 2: [], 3: []}),
            paths={(0, 0), (0, 1), (0, 3), (1, 1), (1, 3), (2, 2), (3, 3)}
        )

    def test_case_4_8(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [0], 2: [3], 3: [2]}),
            paths={(0, 0), (0, 1), (1, 0), (1, 1), (2, 2), (2, 3), (3, 2), (3, 3)}
        )

    def test_case_5_1(self):
        self._run_test_case(
            graph=Graph({0: [2], 1: [], 2: [1, 3, 4], 3: [], 4: []}),
            paths={(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 1),
                   (2, 1), (2, 2), (2, 3), (2, 4), (3, 3), (4, 4)}
        )

    def test_case_5_2(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [2], 2: [0, 3], 3: [4], 4: [3]}),
            paths={(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4),
                   (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (4, 3), (4, 4)}
        )

    def test_case_5_3(self):
        self._run_test_case(
            graph=Graph({0: [1], 1: [0], 2: [], 3: [0, 2], 4: []}),
            paths={(0, 0), (0, 1), (1, 0), (1, 1), (2, 2), (3, 0), (3, 1), (3, 2), (3, 3), (4, 4)}
        )

    def test_case_8_1(self):
        self._run_test_case(
            graph=Graph({0: [4], 1: [2, 3], 2: [1, 3], 3: [2],
                         4: [2, 6], 5: [], 6: [5, 7], 7: [5]}),
            paths={(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7),
                   (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3),
                   (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (5, 5),
                   (6, 5), (6, 6), (6, 7), (7, 5), (7, 7)}
        )

    def test_case_8_2(self):
        self._run_test_case(
            graph=Graph({0: [2], 1: [3, 5], 2: [4, 6], 3: [5], 4: [6], 5: [3], 6: [0], 7: [3, 5]}),
            paths={(0, 0), (0, 2), (0, 4), (0, 6), (1, 1), (1, 3), (1, 5), (2, 0), (2, 2),
                   (2, 4), (2, 6), (3, 3), (3, 5), (4, 0), (4, 2), (4, 4), (4, 6), (5, 3),
                   (5, 5), (6, 0), (6, 2), (6, 4), (6, 6), (7, 3), (7, 5), (7, 7)}
        )

    def test_case_15(self):
        self._run_test_case(
            graph=Graph({0: [1, 2], 1: [3, 4], 2: [5, 6], 3: [7, 8], 4: [9, 10], 5: [11, 12],
                         6: [13, 14], 7: [], 8: [], 9: [], 10: [], 11: [], 12: [], 13: [], 14: []}),
            paths={(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9),
                   (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (1, 1), (1, 3), (1, 4), (1, 7),
                   (1, 8), (1, 9), (1, 10), (2, 2), (2, 5), (2, 6), (2, 11), (2, 12), (2, 13),
                   (2, 14), (3, 3), (3, 7), (3, 8), (4, 4), (4, 9), (4, 10), (5, 5), (5, 11),
                   (5, 12), (6, 6), (6, 13), (6, 14), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11),
                   (12, 12), (13, 13), (14, 14)}
        )

    def test_case_32(self):
        self._run_test_case(
            graph=Graph({0: [1, 2, 7], 1: [0], 2: [0, 8], 3: [4, 10], 4: [3, 5], 5: [6, 11],
                         6: [12, 13], 7: [8, 14, 15], 8: [1, 2, 9], 9: [3, 8, 17], 10: [4, 11, 18],
                         11: [], 12: [6, 13], 13: [6], 14: [22], 15: [16, 22], 16: [15, 23],
                         17: [8, 10, 23], 18: [10, 24, 25], 19: [11, 26], 20: [13, 26],
                         21: [15, 27], 22: [14], 23: [17, 24, 28, 29], 24: [18, 23, 25], 25: [19],
                         26: [12, 19, 20, 31], 27: [21], 28: [29], 29: [25, 28], 30: [], 31: [26]}),
            paths={(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9),
                   (0, 10), (0, 11), (0, 12), (0, 13), (0, 14), (0, 15), (0, 16), (0, 17), (0, 18),
                   (0, 19), (0, 20), (0, 22), (0, 23), (0, 24), (0, 25), (0, 26), (0, 28), (0, 29),
                   (0, 31), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8),
                   (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14), (1, 15), (1, 16), (1, 17),
                   (1, 18), (1, 19), (1, 20), (1, 22), (1, 23), (1, 24), (1, 25), (1, 26), (1, 28),
                   (1, 29), (1, 31), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7),
                   (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13), (2, 14), (2, 15), (2, 16),
                   (2, 17), (2, 18), (2, 19), (2, 20), (2, 22), (2, 23), (2, 24), (2, 25), (2, 26),
                   (2, 28), (2, 29), (2, 31), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5),
                   (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (3, 13), (3, 14),
                   (3, 15), (3, 16), (3, 17), (3, 18), (3, 19), (3, 20), (3, 22), (3, 23), (3, 24),
                   (3, 25), (3, 26), (3, 28), (3, 29), (3, 31), (4, 0), (4, 1), (4, 2), (4, 3),
                   (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12),
                   (4, 13), (4, 14), (4, 15), (4, 16), (4, 17), (4, 18), (4, 19), (4, 20), (4, 22),
                   (4, 23), (4, 24), (4, 25), (4, 26), (4, 28), (4, 29), (4, 31), (5, 5), (5, 6),
                   (5, 11), (5, 12), (5, 13), (6, 6), (6, 12), (6, 13), (7, 0), (7, 1), (7, 2),
                   (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (7, 10), (7, 11),
                   (7, 12), (7, 13), (7, 14), (7, 15), (7, 16), (7, 17), (7, 18), (7, 19), (7, 20),
                   (7, 22), (7, 23), (7, 24), (7, 25), (7, 26), (7, 28), (7, 29), (7, 31), (8, 0),
                   (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (8, 10),
                   (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (8, 16), (8, 17), (8, 18), (8, 19),
                   (8, 20), (8, 22), (8, 23), (8, 24), (8, 25), (8, 26), (8, 28), (8, 29), (8, 31),
                   (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9),
                   (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (9, 16), (9, 17), (9, 18),
                   (9, 19), (9, 20), (9, 22), (9, 23), (9, 24), (9, 25), (9, 26), (9, 28), (9, 29),
                   (9, 31), (10, 0), (10, 1), (10, 2), (10, 3), (10, 4), (10, 5), (10, 6), (10, 7),
                   (10, 8), (10, 9), (10, 10), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15),
                   (10, 16), (10, 17), (10, 18), (10, 19), (10, 20), (10, 22), (10, 23), (10, 24),
                   (10, 25), (10, 26), (10, 28), (10, 29), (10, 31), (11, 11), (12, 6), (12, 12),
                   (12, 13), (13, 6), (13, 12), (13, 13), (14, 14), (14, 22), (15, 0), (15, 1),
                   (15, 2), (15, 3), (15, 4), (15, 5), (15, 6), (15, 7), (15, 8), (15, 9), (15, 10),
                   (15, 11), (15, 12), (15, 13), (15, 14), (15, 15), (15, 16), (15, 17), (15, 18),
                   (15, 19), (15, 20), (15, 22), (15, 23), (15, 24), (15, 25), (15, 26), (15, 28),
                   (15, 29), (15, 31), (16, 0), (16, 1), (16, 2), (16, 3), (16, 4), (16, 5),
                   (16, 6), (16, 7), (16, 8), (16, 9), (16, 10), (16, 11), (16, 12), (16, 13),
                   (16, 14), (16, 15), (16, 16), (16, 17), (16, 18), (16, 19), (16, 20), (16, 22),
                   (16, 23), (16, 24), (16, 25), (16, 26), (16, 28), (16, 29), (16, 31), (17, 0),
                   (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7), (17, 8), (17, 9),
                   (17, 10), (17, 11), (17, 12), (17, 13), (17, 14), (17, 15), (17, 16), (17, 17),
                   (17, 18), (17, 19), (17, 20), (17, 22), (17, 23), (17, 24), (17, 25), (17, 26),
                   (17, 28), (17, 29), (17, 31), (18, 0), (18, 1), (18, 2), (18, 3), (18, 4),
                   (18, 5), (18, 6), (18, 7), (18, 8), (18, 9), (18, 10), (18, 11), (18, 12),
                   (18, 13), (18, 14), (18, 15), (18, 16), (18, 17), (18, 18), (18, 19), (18, 20),
                   (18, 22), (18, 23), (18, 24), (18, 25), (18, 26), (18, 28), (18, 29), (18, 31),
                   (19, 6), (19, 11), (19, 12), (19, 13), (19, 19), (19, 20), (19, 26), (19, 31),
                   (20, 6), (20, 11), (20, 12), (20, 13), (20, 19), (20, 20), (20, 26), (20, 31),
                   (21, 0), (21, 1), (21, 2), (21, 3), (21, 4), (21, 5), (21, 6), (21, 7), (21, 8),
                   (21, 9), (21, 10), (21, 11), (21, 12), (21, 13), (21, 14), (21, 15), (21, 16),
                   (21, 17), (21, 18), (21, 19), (21, 20), (21, 21), (21, 22), (21, 23), (21, 24),
                   (21, 25), (21, 26), (21, 27), (21, 28), (21, 29), (21, 31), (22, 14), (22, 22),
                   (23, 0), (23, 1), (23, 2), (23, 3), (23, 4), (23, 5), (23, 6), (23, 7), (23, 8),
                   (23, 9), (23, 10), (23, 11), (23, 12), (23, 13), (23, 14), (23, 15), (23, 16),
                   (23, 17), (23, 18), (23, 19), (23, 20), (23, 22), (23, 23), (23, 24), (23, 25),
                   (23, 26), (23, 28), (23, 29), (23, 31), (0, 31), (24, 0), (24, 1), (24, 2),
                   (24, 3), (24, 4), (24, 5), (24, 6), (24, 7), (24, 8), (24, 9), (24, 10),
                   (24, 11), (24, 12), (24, 13), (24, 14), (24, 15), (24, 16), (24, 17), (24, 18),
                   (24, 19), (24, 20), (24, 22), (24, 23), (24, 24), (24, 25), (24, 26), (24, 28),
                   (24, 29), (24, 31), (25, 6), (25, 11), (25, 12), (25, 13), (25, 19), (25, 20),
                   (25, 25), (25, 26), (25, 31), (26, 6), (26, 11), (26, 12), (26, 13), (26, 19),
                   (26, 20), (26, 26), (26, 31), (27, 0), (27, 1), (27, 2), (27, 3), (27, 4),
                   (27, 5), (27, 6), (27, 7), (27, 8), (27, 9), (27, 10), (27, 11), (27, 12),
                   (27, 13), (27, 14), (27, 15), (27, 16), (27, 17), (27, 18), (27, 19), (27, 20),
                   (27, 21), (27, 22), (27, 23), (27, 24), (27, 25), (27, 26), (27, 27), (27, 28),
                   (27, 29), (27, 31), (28, 6), (28, 11), (28, 12), (28, 13), (28, 19), (28, 20),
                   (28, 25), (28, 26), (28, 28), (28, 29), (28, 31), (29, 6), (29, 11), (29, 12),
                   (29, 13), (29, 19), (29, 20), (29, 25), (29, 26), (29, 28), (29, 29), (29, 31),
                   (30, 30), (31, 6), (31, 11), (31, 12), (31, 13), (31, 19), (31, 20), (31, 26),
                   (31, 31)}
        )
